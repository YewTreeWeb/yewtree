/// Convert Hex to HSL color.
@function hex2hsl($colour) {
  @return unquote("hsl(#{hue($colour)}, #{saturation($colour)}, #{lightness($colour)})"
  );
}

/// Convert Hex to HSLA color.
@function hex2hsla($colour, $opacity) {
  @return unquote("hsla(#{hue($colour)}, #{saturation($colour)}, #{lightness($colour)}, $opacity)"
  );
}

/// Convert Hex to RGB color.
@function rgb($colour) {
  @return unquote("rgb(#{red($colour)}, #{green($colour)}, #{blue($colour)})");
}

/// Access CSS variables
@function v($name) {
  @return var(--#{$name});
}

/// Converts px to em.
@function em($pixels, $context: 16) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

/// Converts px, em and percent.
@function convert($value, $currentUnit, $convertUnit) {
  @if $currentUnit==px {
    @if $convertUnit==em {
      @return $value / 16+0em;
    }

    @else if $convertUnit==percent {
      @return percentage($value / 16);
    }
  }

  @else if $currentUnit==em {
    @if $convertUnit==px {
      @return $value * 16+0px;
    }

    @else if $convertUnit==percent {
      @return percentage($value);
    }
  }

  @else if $currentUnit==percent {
    @if $convertUnit==px {
      @return $value * 16 / 100+0px;
    }

    @else if $convertUnit==em {
      @return $value / 100+0em;
    }
  }

  @else if $currentUnit==pts {
    @if $convertUnit==px {
      @return $value * 1.3333+0px;
    }

    @else if $convertUnit==em {
      @return $value / 12+0em;
    }

    @else if $convertUnit==percent {
      @return percentage($value / 12);
    }
  }
}

/// Strip unit from number.
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// Retrieve colour from $colors map ie. `color(base, primary)`.
@function color($color-name, $color-variant:null, $true-val:false) {

  // if we are returning the true color value
  @if $true-val==true {

    // color variant is optional
    @if ($color-variant !=null) {
      // map inception, need two deep
      @return map-get(map-get($colors, $color-name), $color-variant);

    }

    @else {
      // single-level color, one deep
      @return map-get($colors, $color-name);

    }

    // if weâ€™re only returning the CSS4 variable
  }

  @else {

    // color variant is optional
    @if ($color-variant !=null) {
      // map inception, need two names
      @return var(--color-#{$color-name}-#{$color-variant});

    }

    @else {
      // single-level color, one name
      @return var(--color-#{$color-name});

    }

  }
}
